'use strict';

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

var _parser = require('./parser');

var _util = require('./util');

var _config = require('./config');

var config = _interopRequireWildcard(_config);

var _legacy = require('./legacy');

var legacy = _interopRequireWildcard(_legacy);

var _map = require('./map');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function partedLoader(type, loader, params, source, map) {
  var promise = void 0;
  switch (type) {
    case 'js':
    case 'script':
      var transformerVersion = config.transformerVersion;
      promise = (0, _parser.parseScript)(loader, params, source, { config: JSON.stringify({ transformerVersion: transformerVersion }) });
      break;
    case 'css':
    case 'style':
      promise = (0, _parser.parseStyle)(loader, params, source);
      break;
    case 'html':
    case 'tpl':
    case 'template':
      promise = (0, _parser.parseTemplate)(loader, params, source);
      break;
    case 'we':
    default:
      map.enable();
      promise = (0, _parser.parseWeex)(loader, params, source, map);
      break;
  }
  return promise;
}

function loader(source) {
  var _this = this;

  this.cacheable && this.cacheable();

  var callback = this.async();
  var params = {
    loaderQuery: _loaderUtils2.default.parseQuery(this.query),
    resourceQuery: _loaderUtils2.default.parseQuery(this.resourceQuery),
    resourcePath: this.resourcePath
  };
  var type = params.loaderQuery.type || 'we';
  var resourcePath = params.resourcePath;

  var filename = (0, _util.getFilenameByPath)(resourcePath);
  var map = new _map.ScriptMap(filename, source);

  var promise = partedLoader(type, this, params, source, map);

  promise.then(function (result) {
    if (map.enabled) {
      map.parse();
    }
    if (type === 'style' || type === 'css' || type === 'html' || type === 'tpl' || type === 'template') {
      result = 'module.exports=' + result;
    }
    callback(null, result, map.toJSON());
  }).catch(function (err) {
    // console.error(err.stack)
    _this.emitError(err.toString());
    callback(err.toString(), '');
  });
}

loader.setLogLevel = function (level) {
  config.logLevel = level;
};

for (var key in legacy) {
  loader[key] = legacy[key];
}

module.exports = loader;