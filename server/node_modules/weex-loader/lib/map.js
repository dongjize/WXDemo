'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScriptMap = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _sourceMap = require('source-map');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ScriptMap = exports.ScriptMap = function () {
  function ScriptMap(filename, content) {
    _classCallCheck(this, ScriptMap);

    this.filename = filename;
    this.content = content;
    var generator = new _sourceMap.SourceMapGenerator();
    generator.setSourceContent(filename, content);
    this.generator = generator;
    this.history = [];
    this.elements = {};
    this.enabled = false;
  }

  _createClass(ScriptMap, [{
    key: 'enable',
    value: function enable() {
      this.enabled = true;
    }
  }, {
    key: 'start',
    value: function start() {
      if (!this.enabled) {
        return;
      }
      this.current = { elements: [], scripts: [] };
    }
  }, {
    key: 'end',
    value: function end() {
      if (!this.enabled) {
        return;
      }
      var current = this.current;
      this.current = {};

      // re-order the elements and scripts into history
      var length = current.elements.length;
      if (length > 0) {
        var children = this.history.splice(-length, length);
        current.children = children;
      }

      current.elements.concat(current.scripts).forEach(function (item) {
        current.name = item.name;
        delete item.name;
      });

      current.elements.forEach(function (info, index) {
        current.children[index].length = info.length;
        current.children[index].line = info.line;
      });

      delete current.elements;
      this.history.push(current);
    }
  }, {
    key: 'addElement',
    value: function addElement(name, index, line, length) {
      if (!this.enabled) {
        return;
      }
      this.current.elements.push({ name: name, index: index, line: line, length: length });
    }
  }, {
    key: 'addScript',
    value: function addScript(name, info, externalOffset) {
      if (!this.enabled) {
        return;
      }
      this.current.scripts.push({ name: name, info: info, externalOffset: externalOffset });
    }
  }, {
    key: 'setElementPosition',
    value: function setElementPosition(name, line, column) {
      if (!this.enabled) {
        return;
      }
      this.elements[name] = { line: line, column: column };
    }
  }, {
    key: 'parse',
    value: function parse(target, startLine) {
      var _this = this;

      if (!this.enabled) {
        return;
      }
      target = target || this.history[0];
      if (!target) {
        return;
      }
      startLine = startLine || 0;

      var _target = target;
      var name = _target.name;
      var line = _target.line;
      var scripts = _target.scripts;
      var children = _target.children;

      var elInfo = this.elements[name] || {};

      (scripts || []).forEach(function (script) {
        var info = script.info;
        var externalOffset = script.externalOffset;
        var original = info.original;
        var generated = info.generated;

        var scriptLength = info.length;
        _this.add(original.line + (elInfo.line || 1) - 1, scriptLength, generated.line + startLine + (line || 1) - 1 + externalOffset);
      });

      (children || []).forEach(function (child) {
        _this.parse(child, startLine + (line || 1) - 1);
      });

      this.json = true;
    }
  }, {
    key: 'add',
    value: function add(originalLine, length, generatedLine) {
      if (!this.enabled) {
        return;
      }
      var option = {
        source: this.filename,
        original: { line: originalLine, column: 1 },
        generated: { line: generatedLine, column: 1 }
      };
      for (var i = 0; i < length; i++) {
        option.original.line = originalLine + i;
        option.generated.line = generatedLine + i;
        this.generator.addMapping(option);
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.json ? this.generator.toJSON() : null;
    }
  }]);

  return ScriptMap;
}();