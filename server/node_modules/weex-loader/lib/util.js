'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FUNC_END_REG = exports.FUNC_END = exports.FUNC_START_REG = exports.FUNC_START = exports.REQUIRE_REG = exports.MODULE_EXPORTS_REG = undefined;
exports.getNameByPath = getNameByPath;
exports.getFilenameByPath = getFilenameByPath;
exports.stringifyFunction = stringifyFunction;
exports.appendToWarn = appendToWarn;
exports.checkFileExist = checkFileExist;
exports.depHasRequired = depHasRequired;
exports.parseElementNameByPath = parseElementNameByPath;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _config = require('./config');

var config = _interopRequireWildcard(_config);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MODULE_EXPORTS_REG = exports.MODULE_EXPORTS_REG = /module\.exports/g;
var REQUIRE_REG = exports.REQUIRE_REG = /require\((["'])(@weex\-module\/[^\)\1]+)\1\)/g;

function getNameByPath(filepath) {
  return _path2.default.basename(filepath).replace(/\..*$/, '');
}

function getFilenameByPath(filepath) {
  return _path2.default.relative('.', filepath);
}

var FUNC_START = exports.FUNC_START = '#####FUN_S#####';
var FUNC_START_REG = exports.FUNC_START_REG = new RegExp('["\']' + FUNC_START, 'g');
var FUNC_END = exports.FUNC_END = '#####FUN_E#####';
var FUNC_END_REG = exports.FUNC_END_REG = new RegExp(FUNC_END + '["\']', 'g');

function stringifyFunction(key, value) {
  if (typeof value === 'function') {
    return FUNC_START + value.toString() + '#####FUN_E#####';
  }
  return value;
}

function appendToWarn(loader, logs) {
  if (config.logLevel && logs && logs.length) {
    logs.forEach(function (log) {
      loader.emitWarning(log.reason + '\t@' + log.line + ':' + log.column);
    });
  }
}

function checkFileExist(name, resourcePath) {
  var context = _path2.default.dirname(resourcePath);
  var filename = './' + name + '.we';
  var filepath = _path2.default.resolve(context, filename);
  return _fs2.default.existsSync(filepath) ? filename : null;
}

function depHasRequired(content, dep) {
  return !content.match(new RegExp('require\\(["\']./' + _path2.default.basename(dep) + '(.we)?["\']\\)', 'g'));
}

function parseElementNameByPath(filepath) {
  return _path2.default.parse(filepath).name;
}